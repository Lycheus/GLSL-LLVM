attribute vec4 rm_Vertex;
attribute vec3 rm_Normal;

uniform mat4 ProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat4 ModelViewMatrix1;
uniform vec4 ambient_light, ambient_material;
uniform vec4 diffuse_light, diffuse_material;
uniform vec4 specular_light, specular_material;
uniform vec3 eye_Pos;
uniform vec3 light_Pos;
uniform float specularExp;
uniform mat4 NormalMatrix;

varying vec4 Color_Light;

void main()
{	
	vec4 ambient,diffuse;
	vec3 lightDir,halfVector,normal;
	
	normal = normalize(NormalMatrix * rm_Normal);
	lightDir = light_Pos;
	halfVector = normalize(light_Pos+eye_Pos);
	diffuse = diffuse_light * diffuse_material;
	ambient = ambient_light * ambient_material;

	vec3 n,halfV,viewV,ldir;
	float NdotL,NdotHV;
	vec4 color = ambient;

	n = normalize(normal);

	NdotL = max(dot(n,lightDir),0.0);

	if (NdotL > 0.0) {
		halfV = normalize(halfVector);
		NdotHV = max(dot(n,halfV),0.0);
		color +=  specular_light * specular_material * pow(NdotHV,specularExp);
		//color += diffuse * NdotL;
	}

	Color_Light=color/3.0;
  
 	gl_Position =  ProjectionMatrix * ModelViewMatrix * ModelViewMatrix1 * rm_Vertex;


	
}
